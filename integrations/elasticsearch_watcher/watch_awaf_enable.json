{
  "trigger": {
    "schedule": {
      "interval": "3m"
    }
  },
  "input": {
    "search": {
      "request": {
        "search_type": "query_then_fetch",
        "indices": [
          "awaf-*"
        ],
        "rest_total_hits_as_int": true,
        "body": {
          "size": 20,
          "query": {
            "bool": {
              "must": [
                {
                  "term": {
                    "request_status.keyword": "alerted"
                  }
                },
                {
                  "terms": {
                    "severity.keyword": [
                      "Critical",
                      "Error"
                    ]
                  }
                },
                {
                  "terms": {
                    "geoip.geo.country_iso_code.keyword": [
                      "CN",
                      "KP",
                      "RU"
                    ]
                  }
                },
                {
                  "range": {
                    "@timestamp": {
                      "gte": "now-5m",
                      "lte": "now"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    }
  },
  "condition": {
    "compare": {
      "ctx.payload.hits.total": {
        "gt": 0
      }
    }
  },
  "actions": {
    "logstash_exec": {
      "transform": {
        "script": {
          "source": """
            def hits = ctx.payload.hits.hits; 
            def transform = new ArrayList(); 
            for (hit in hits) {
                if (hit._source.containsKey('src_ip')) {
                    def ipField = hit._source.src_ip;
                    if (ipField instanceof List && ipField.size() > 0) {
                        transform.add(ipField[0]);
                    } else {
                        transform.add(ipField);
                    }
                }
            }
            return String.join(", ", transform);
          """,
          "lang": "painless"
        }
      },
      "webhook": {
        "scheme": "http",
        "host": "10.1.1.7",
        "port": 5001,
        "method": "post",
        "path": "/endpoint",
        "params": {},
        "headers": {},
        "body": """{
          "message": "Ansible Please Turn on AWAF Policy",
          "payload": "{{ctx.payload._value}}"
        }"""
      }
    }
  }
}