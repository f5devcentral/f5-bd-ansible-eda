---

# This code is designed to connect to your Classic BIG-IP and Block IPs using a payload, currently its hard coded in vars but one could use a payload to resolve
# this is also looking for Hosts F5 this could be modified as well for any other reason.

- name: ASM Policy Update with Blocked IPs
  hosts: lb
  connection: local
  gather_facts: false
  vars:
    blocked_ip_events: "{{ ansible_eda.event.payload }}"
    f5_vip_name: VS_WEB
    f5_vip_port: "80"
    f5_admin_port: "443"
    asm_policy_name: "WAF-POLICY"
    asm_policy_directory: "/tmp/f5/"
    asm_policy_file: "WAF-POLICY.xml"

  tasks:

    - name: Setup provider
      ansible.builtin.set_fact:
        provider:
          server: "{{ ansible_host }}"
          user: "{{ ansible_user }}"
          password: "{{ ansible_password }}"
          server_port: "{{ f5_admin_port }}"
          no_f5_teem: true
          validate_certs: false

    - name: Blocked IP Events From EDA
      ansible.builtin.debug:
        msg: "{{ blocked_ip_events.payload }}"

    - name: Create Array from BlockedIPs
      ansible.builtin.set_fact:
        blocked_ips: "{{ blocked_ip_events.payload.split(', ') }}"
      when: blocked_ip_events is defined

    - name: Remove Last Object from Array which is empty array object
      ansible.builtin.set_fact:
        blocked_ips: "{{ blocked_ips[:-1] }}"
      when: blocked_ip_events is defined

    - name: Show Blocked IPs
      ansible.builtin.debug:
        msg: "{{ blocked_ips }}"

# Fetch asm_policy to Variable
    - name: Fetching ASM Policy
      f5networks.f5_modules.bigip_asm_policy_fetch:
        provider: "{{ provider }}"
        name: "{{ asm_policy_name }}"
        inline: true
        force: true
      register: asm_policy
      when: Blocked_URLs is defined or blocked_ips is defined

    - name: Create tmp directory if it does not exist
      ansible.builtin.file:
        path: "{{ asm_policy_directory }}"
        state: directory
        mode: '0755'
      delegate_to: localhost

# Output Data to File due to BUG 1390
    - name: Copy Memory to File
      ansible.builtin.copy:
        content: "{{ asm_policy.inline_policy }}"
        dest: "{{ asm_policy_directory }}{{ asm_policy_file }}"
        mode: '0644'
      when: Blocked_URLs is defined or blocked_ips is defined
      delegate_to: localhost

# Validate Existing IP Addresses
    - name: Validate Existing IP Addresses
      ansible.builtin.shell: grep "<ip_address>{{ item }}" {{ asm_policy_directory }}{{ asm_policy_file }}
      register: blocked_ip_valid
      with_items: "{{ blocked_ips }}"
      ignore_errors: true
      when: blocked_ips is defined and item != ""
      changed_when: blocked_ip_valid.rc != 0
      delegate_to: localhost

# Import Additional Disallowed IPs
    - name: Add Disallowed IPs
      community.general.xml:
        path: "{{ asm_policy_directory }}{{ asm_policy_file }}"
        pretty_print: true
        input_type: xml
        insertafter: true
        xpath: /policy/geolocation
        add_children: "<whitelist><ip_address>{{ item.item }}</ip_address><subnet_mask>255.255.255.255</subnet_mask><policy_builder_trusted>false</policy_builder_trusted><ignore_anomalies>false</ignore_anomalies><never_log>false</never_log><block_ip>Always</block_ip><never_learn>false</never_learn><description>blocked</description><ignore_ip_reputation>false</ignore_ip_reputation></whitelist>"
      with_items: "{{ blocked_ip_valid.results }}"
      when: blocked_ips is defined and item != "" and item.rc == 1
      delegate_to: localhost

# Re-Deploy ASM policy
    - name: Create an LTM policy
      f5networks.f5_modules.bigip_policy:
        provider: "{{ provider }}"
        name: "{{ asm_policy_name }}"
        state: present
      when: Blocked_URLs is defined or blocked_ips is defined
      delegate_to: localhost

    - name: Import ASM policy
      f5networks.f5_modules.bigip_asm_policy_import:
        provider: "{{ provider }}"
        name: "{{ asm_policy_name }}"
        source: "{{ asm_policy_directory }}{{ asm_policy_file }}"
        force: true
      when: Blocked_URLs is defined or blocked_ips is defined
      delegate_to: localhost

    - name: Replace a forward action with an ASM action
      f5networks.f5_modules.bigip_policy_rule:
        provider: "{{ provider }}"
        policy: "{{ asm_policy_name }}"
        name: rule1
        actions:
          - type: enable
            asm_policy: "{{ asm_policy_name }}"
      when: Blocked_URLs is defined or blocked_ips is defined
      delegate_to: localhost

    - name: Deploy Draft ASM policy
      f5networks.f5_modules.bigip_policy:
        provider: "{{ provider }}"
        name: "{{ asm_policy_name }}"
        state: present
        rules:
          - rule1
      when: Blocked_URLs is defined or blocked_ips is defined
      delegate_to: localhost

# Apply Draft ASM policy
    - name: Activate ASM Policy
      f5networks.f5_modules.bigip_asm_policy_manage:
        provider: "{{ provider }}"
        name: "{{ asm_policy_name }}"
        active: true
      delegate_to: localhost

# Publish ASM Policy via TMSH
    - name: Publish ASM Policy via TMSH
      f5networks.f5_modules.bigip_command:
        commands: "publish asm policy {{ asm_policy_name }}"
        provider: "{{ provider }}"
      delegate_to: localhost
